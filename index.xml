<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Horned Sungem Documentation</title>
    <link>https://hornedsungem.github.io/Docs/</link>
    <description>Recent content on Horned Sungem Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://hornedsungem.github.io/Docs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>https://hornedsungem.github.io/Docs/_footer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hornedsungem.github.io/Docs/_footer/</guid>
      <description>Sungem Horned Documentation</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hornedsungem.github.io/Docs/workflow/detector/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hornedsungem.github.io/Docs/workflow/detector/</guid>
      <description>SSD-Mobilenet 人脸/物体检测 本章为您介绍如何使用角蜂鸟在Python调用内置部署的SSD-Mobilenet人脸和物体检测卷积神经网络。
检测器分析图片并找出目标的位置和尺寸。
 本教程基于Ubuntu 16.04系统  路径和文件  人脸识别Python：SungemSDK/examples/python/FaceDetector.py 模型文件：SungemSDK/examples/graphs/graph_face_SSD
 物体识别Python：SungemSDK/examples/python/ObjectDetector.py
 模型文件：SungemSDK/examples/graphs/graph_object_SSD
  人脸检测 Face Detector 在python目录下执行以下命令来启动 人脸检测 范例。
~/SungemSDK/examples/python$ python3 FaceDetector.py  得到结果：
| ======= Horned Sungem ======== | | Device found [0] | | ../graphs/graph_face_SSD | | Model loaded to Python | | Model allocated to device | | ============================== | * *****SSD [0]: Box values****** * ...  如图像中包括人脸，则：
* *****SSD [1]: Box values****** * * Box Name: Face * * 360 106 591 361 - w:231 h:255 *  其中SSD [N]中N为检测人脸个数，下一行为人脸检测框Bounding Box的左上角和右下角坐标以及窗的宽高。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hornedsungem.github.io/Docs/workflow/recorder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hornedsungem.github.io/Docs/workflow/recorder/</guid>
      <description>角蜂鸟情景记录器 本章为您介绍如何使用角蜂鸟在Python调用内置部署的GoogleNet来实现一个实用性非常强的情景记录器。
介绍 角蜂鸟情景记录器可将希望分类的图像实时储存在不同的“存档”下并立即生成一个分类模型，之后便可辨识它们对应的场景。比如说在门打开的时候将图像录制进[存档1]，关闭的时候录制进[存档2]，生成模型之后便可辨认门是否开启。将不同的手势录制进不同的存档下就变成了一个简单的手势识别。
使用说明 执行Python程序、初始化角蜂鸟之后，对准需要录制的第一个目标，按1-5之中的一个数字（对应存档编号）：
比如说按1后保持7帧，终端将显示：
| Record to bin: 1 | | [7]-[0]-[0]-[0]-[0] |  接着对准第二个目标按2：
| Record to bin: 2 | | [7]-[8]-[0]-[0]-[0] |  这样记录器中储存两个目标就可以开始生成模型了。
按 &amp;lsquo;r&amp;rsquo; 将自动精简储存的图像，并生成模型。
自动将多余的图片自动删除。
| .........Compressing.......... | | [2]-[2]-[0]-[0]-[0] | | ------Compress finished------- |  进入识别状态并开始实时显示5个不同类别的置信度。下例中的意思为第一个类别的可能性为74%，第二个为26%。第二个栏里简单的将置信度可视化，竖条越多说明当前场景越可能属于该存档。
| ---------Running ANN---------- | * [1]: 0.74 * * [2]: 0.26 * * [3]: 0.00 * * [4]: 0.00 * * [5]: 0.00 * | --------Probabilities--------- | | ||||||| | | || | | | | | | |  注意事项  信噪比  因为记录器会将整个图片量化为特征向量并储存，意味着如果情景中的关键信息占的图像比重越低，效果会越差。</description>
    </item>
    
  </channel>
</rss>