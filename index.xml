<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Horned Sungem Documentation</title>
    <link>https://hornedsungem.github.io/Docs/</link>
    <description>Recent content on Horned Sungem Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="https://hornedsungem.github.io/Docs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Face detector</title>
      <link>https://hornedsungem.github.io/Docs/workflow/python/detector/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hornedsungem.github.io/Docs/workflow/python/detector/</guid>
      <description>SSD-Mobilenet Face Detector This chapter will introduce how to use HS to deploy SSD-Mobilenet face detector
 Based on Ubuntu 16.04  Path and files  Python: SungemSDK-Python/examples/apps/FaceDetector/FaceDetector.py Model file: SungemSDK-Python/examples/graphs/graph_face_SSD  Face Detector Under FaceDetector directory, enter following command to run face detector demo:
~/SungemSDK-Python/examples/apps/FaceDetector$ python3 FaceDetector.py  get result:
| ======= Horned Sungem ======== | | Device found [0] | | ../graphs/graph_face_SSD | | Model loaded to Python | | Model allocated to device | | ============================== | * *****SSD [0]: Box values****** * .</description>
    </item>
    
    <item>
      <title>Object Detector</title>
      <link>https://hornedsungem.github.io/Docs/workflow/python/detector_object/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hornedsungem.github.io/Docs/workflow/python/detector_object/</guid>
      <description>SSD-Mobilenet Object Detector This chapter will introduce how to user HS to deploy SSD-Mobilenet object detector.
Detector analyse images and find the target image location and size.
 Based on Ubuntu 16.04  Path and files  Python: SungemSDK-Python/examples/apps/ObjectDetector/ObjectDetector.py Model files: SungemSDK-Python/examples/graphs/graph_object_SSD  Object Detector Under ObjectDetector directory, enter following command to run object detector demo:
~/SungemSDK/examples/apps/ObjectDetector$ python3 ObjectDetector.py  Object detector is very similar to the previous face detector, except the number of classes is 20 (from VOC dataset).</description>
    </item>
    
    <item>
      <title>Scene Recorder</title>
      <link>https://hornedsungem.github.io/Docs/workflow/python/recorder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hornedsungem.github.io/Docs/workflow/python/recorder/</guid>
      <description>Scene Recorder This chapter introduces how to use HS to deploy GoogleNet for building a useful scene recorder tool
Introduction HS Scene Recorder records and classifies images in real-time. It &amp;lsquo;descripts&amp;rsquo; images into image feature vectors and store them into different bins for training a classifier. For instance, put HS in front of a door and record the images to bin-0 when door is closed and bin-&amp;lsquo;1&amp;rsquo; when door is opened.</description>
    </item>
    
    <item>
      <title>Image Recogniser (Low-level API Tutorial)</title>
      <link>https://hornedsungem.github.io/Docs/workflow/python/image_recognition/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hornedsungem.github.io/Docs/workflow/python/image_recognition/</guid>
      <description>SqueezeNet 1000 Classes Image Classifier This chapter introduces how to build an image classifier by using low-level API only.
 Tested on Ubuntu 16.04  Path and files  Python：SungemSDK-Python/examples/apps/ImageRecognition/ImageRecognition.py Model file：SungemSDK-Python/examples/graphs/graph_sz  Image Recognition run image recogniser with the following command under ImageRecognition directory
~/SungemSDK/examples/apps/ImageRecognition$ python3 ImageRecognition.py  The region-of-interest is highlighted with a cyan bounding box. You can adjust the size by pressing &amp;lsquo;w&amp;rsquo; and &amp;rsquo;s&amp;rsquo;.
Get Top5 classification result, as shown in the example.</description>
    </item>
    
    <item>
      <title>Face recorder (Working with two HS devices)</title>
      <link>https://hornedsungem.github.io/Docs/workflow/python/face_recognition/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hornedsungem.github.io/Docs/workflow/python/face_recognition/</guid>
      <description>Face detetor + Scene recorder = Face recorder This chapter introduces how to build a face recorder with two HS devices.
 Note that two HS devices are needed to run this demo Tested on Ubuntu 16.04 system  Path and files  Face recorder Python：SungemSDK-Python/examples/apps/FaceRecorder/FaceRecorder.py Model file - detection：SungemSDK-Python/examples/graphs/graph_face_SSD Model file - recognition：SungemSDK-Python/examples/graphs/graph_face_rec  Image Recognition After connecting two HS devices, run face recorder with the following command under FaceRecorder directory</description>
    </item>
    
    <item>
      <title>Hello 2018</title>
      <link>https://hornedsungem.github.io/Docs/workflow/android/android_hello2018/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hornedsungem.github.io/Docs/workflow/android/android_hello2018/</guid>
      <description>Quickstart This article describes how to use the Mnist convolutional neural network to achieve digital recognition through the Sungem-SDK in the Android Studio development environment. The current example uses the camera that comes with the HornedSungem. If you need an external image source, please refer to SungemSDK-AndroidExamples.
step 1: Prepare the development environment  Download the latest versionSungemSDK-Android.jar package Prerequisites:  Make sure minSdkVersion is above Android 3.1 Make sure the Android device supports OTG Android Studio 2.</description>
    </item>
    
    <item>
      <title>Face Detector</title>
      <link>https://hornedsungem.github.io/Docs/workflow/android/android_face_detector/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hornedsungem.github.io/Docs/workflow/android/android_face_detector/</guid>
      <description>This article mainly introduces how to use HornedSungem to load the SSD-Mobilenet convolutional neural network on the Android platform to realize face detection.
Preparation  For details on the configuration environment, please refer to quick start, I will not elaborate here. Download the model graph_face_SSD required for face detection, In your Android Studio, create a new assets package under the current module, copy the downloaded model file to this directory.</description>
    </item>
    
    <item>
      <title>Object Detector</title>
      <link>https://hornedsungem.github.io/Docs/workflow/android/android_object_detector/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hornedsungem.github.io/Docs/workflow/android/android_object_detector/</guid>
      <description>This article mainly introduces how to use HornedSungem to load the SSD-Mobilenet convolutional neural network on the Android platform to realize Object detection.
Preparation  For details on the configuration environment, please refer to quick start, I will not elaborate here. Download the model graph_object_SSD required for Object detection, In your Android Studio, create a new assets package under the current module, copy the downloaded model file to this directory.</description>
    </item>
    
    <item>
      <title>SketchGuess</title>
      <link>https://hornedsungem.github.io/Docs/workflow/android/android_sketchguess/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hornedsungem.github.io/Docs/workflow/android/android_sketchguess/</guid>
      <description>This article introduces you to use HornedSungem to achieve hand-painted recognition under the Android platform.
Preparation  For details on the configuration environment, please refer to quick start, I will not elaborate here. Download the model graph_sg, In your Android Studio, create a new assets package under the current module, copy the downloaded model file to this directory. Because the project needs to process and display the image, the javacv library is use.</description>
    </item>
    
    <item>
      <title>Low Level API</title>
      <link>https://hornedsungem.github.io/Docs/api/lowlevel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hornedsungem.github.io/Docs/api/lowlevel/</guid>
      <description>Horned Sungem Low Level API Version 0.1.0 Enumerations GlobalOption  Version: 0.1.0
 Overview:
The GlobalOption class is an enumeration class that defines the options that are passed to and received from the SetGlobalOption and the GetGlobalOption functions.
 enum: LOGLEVEL
 option type: int
 possible values: 0, 1, 2
 get/set get, set
 Description
0 = Nothing is printed (default)
1 = Print errors only
2 = Verbose</description>
    </item>
    
    <item>
      <title>ROS Tutorial(Chinese)</title>
      <link>https://hornedsungem.github.io/Docs/workflow/ros/quickstart/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hornedsungem.github.io/Docs/workflow/ros/quickstart/</guid>
      <description>本文主要介绍如何通过ROS使用角蜂鸟的基本示例教程
1 配置环境 操作系统 Ubuntu16.04下
配置ROS环境 (推荐kinetic版本) 下面给大家介绍配置ROS环境具体的执行过程
 设置当前系统可接受ROS的包,并设置密钥。
sudo sh -c &#39;echo &amp;quot;deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main&amp;quot; &amp;gt; /etc/apt/sources.list.d/ros-latest.list&#39; sudo apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:80 --recv-key 421C365BD9FF1F717815A3895523BAEEB01FA116  检查apt-get更新，安装ROS, rqt, rviz, and robot-generic libraries。
sudo apt-get update sudo apt-get install ros-kinetic-desktop  安装不上就科学上网一下
 安装rosdep,rosdep为要编译的源代码安装系统依赖项，并且需要在ROS中运行一些核心组件。
sudo rosdep init rosdep update  如果报错多尝试几次，实在不行删除配置文件
cd /etc/ros/rosdep/sources.list.d sudo rm -rf 20-default.list  重新执行第3步骤
 设置ROS环境变量到bashrc
echo &amp;quot;source /opt/ros/kinetic/setup.bash&amp;quot; &amp;gt;&amp;gt; ~/.bashrc source ~/.</description>
    </item>
    
    <item>
      <title>High-level API</title>
      <link>https://hornedsungem.github.io/Docs/api/highlevel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hornedsungem.github.io/Docs/api/highlevel/</guid>
      <description>Horned Sungem High Level API Version 0.1.0 HS.__init__()  Version: 0.1.0
 Overview: initialisation
 Syntax:
  hs.HS(modelName, **kwargs)   Parameters:
 modelName: built-in models&amp;rsquo; name
 **kwargs key arguments: (Optional)
 &amp;lsquo;verbose&amp;rsquo; Detail of log. From 0 to 2: no log, key log, full log. Default is 2
 &amp;lsquo;mean&amp;rsquo; Mean value in preprocessing. Default is 1.0
 &amp;lsquo;scale&amp;rsquo; Scale value in preprocessing. Default is 0.007843 (1&amp;frasl;127.</description>
    </item>
    
    <item>
      <title>Android API</title>
      <link>https://hornedsungem.github.io/Docs/api/android/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hornedsungem.github.io/Docs/api/android/</guid>
      <description>SungemSDK-Android API The current version is 0.1.2 ConnectStatus Parameter  HS_OK :The function call worked as expected. HS_BUSY :The device is busy, retry later. HS_ERROR :An unexpected error was encountered during the function call. HS_NO_FILE :No files found HS_UNSUPPORTED_GRAPH_FILE :The graph file is corrupt. Try to recompile the graph file with the version of the toolkit that corresponds to the API version. STATUS_WAIT_TIMEOUT : The function call timeout  HsBaseThread HsBaseThread is a thread for HornedSungem interacion, developers can extend this class for function expansion.</description>
    </item>
    
    <item>
      <title>Rapiro Robot</title>
      <link>https://hornedsungem.github.io/Docs/workflow/diy/rapiro/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hornedsungem.github.io/Docs/workflow/diy/rapiro/</guid>
      <description>This chapter introduced how to build a robot that controlled by HS face detector.
 Hardware requirement:
 Horned Sungem Device Raspberry Pi 3b Rapiro Robot 12V to 5V DC-DC module (Optional) Cooling fan (Optional)   Workflow The built-in model Mobilenet-SSD face detector is used in this DIY demo. The logic is illustrated as below:
Implementation Firstly assemble and power the Rapiro robot, then use robot to supply the power to a Raspeberry Pi.</description>
    </item>
    
    <item>
      <title>Smart Lamp</title>
      <link>https://hornedsungem.github.io/Docs/workflow/diy/smartlamp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hornedsungem.github.io/Docs/workflow/diy/smartlamp/</guid>
      <description>Here we give a tutorial on how to control a lamp through face detector with HS device. The lamb automatically turns on if face appears, otherwise turn off.
 Hardware list:
 HS device Raspberry Pi 3b 1 channel relay module 5V USB lamp   Workflow The built-in model Mobilenet-SSD face detector is used in this DIY demo. The logic is illustrated as below:
then we control the switch of the lamp through a 1 channel relay module.</description>
    </item>
    
    <item>
      <title>Sitting posture alarm</title>
      <link>https://hornedsungem.github.io/Docs/workflow/diy/sitting_pose/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hornedsungem.github.io/Docs/workflow/diy/sitting_pose/</guid>
      <description>In this tutorial we will build a simple sitting posture alarm.
 Hardware list:
 HS device Raspberry Pi 3b Buzzer   Workflow Since currently the HS model zoo does not include pose estimation model, we simplify the problem and use our Scene Recorder to achieve the goal.
Here we consider two senarios that need to be distinguished:
 Normal sitting posture Unhealthy sitting posture  as shown below:</description>
    </item>
    
    <item>
      <title>Raspberry Pi Toy Car</title>
      <link>https://hornedsungem.github.io/Docs/workflow/diy/raspi_car/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hornedsungem.github.io/Docs/workflow/diy/raspi_car/</guid>
      <description>We bring a HS enhanced Raspberry Pi Toy car by using object detector.
 Hardware list:
 HS device Raspberry Pi 3b Assembled Raspberry Pi toy car with SCM controlled motors   Workflow The built-in model Mobilenet-SSD object detector is used in this DIY demo. The logic is illustrated as below:
Implementation Firstly we assemble the toy car, the car is not necessary to be the same as ours, it should work as long as it is controlled through GPIO pin.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hornedsungem.github.io/Docs/_footer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hornedsungem.github.io/Docs/_footer/</guid>
      <description>Horned Sungem Documentation</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hornedsungem.github.io/Docs/workflow/python/ocr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hornedsungem.github.io/Docs/workflow/python/ocr/</guid>
      <description> 本章为您介绍如何使用角蜂鸟在Python调用内置部署的OCR中文文字检测与识别。
OCR分析图片找出文字并识别。
 本教程基于Ubuntu 16.04系统  路径和文件  OCR Python：SungemSDK-Python/examples/apps/OCR/OCR.py 模型文件：SungemSDK-Python/examples/graphs/graph_ocr  </description>
    </item>
    
  </channel>
</rss>