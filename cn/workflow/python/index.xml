<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on 角蜂鸟中文文档</title>
    <link>https://hornedsungem.github.io/Docs/cn/workflow/python/</link>
    <description>Recent content in Python on 角蜂鸟中文文档</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="https://hornedsungem.github.io/Docs/cn/workflow/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>人脸检测</title>
      <link>https://hornedsungem.github.io/Docs/cn/workflow/python/detector/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hornedsungem.github.io/Docs/cn/workflow/python/detector/</guid>
      <description>SSD-Mobilenet 人脸检测 本章为您介绍如何使用角蜂鸟在Python调用内置部署的SSD-Mobilenet人脸检测卷积神经网络。
检测器分析图片并找出目标的位置和尺寸。
 本教程基于Ubuntu 16.04系统  路径和文件  人脸识别Python：SungemSDK-Python/examples/apps/FaceDetector/FaceDetector.py 模型文件：SungemSDK-Python/examples/graphs/graph_face_SSD  人脸检测 Face Detector 在FaceDetector目录下执行以下命令来启动 人脸检测 范例。
~/SungemSDK-Python/examples/apps/FaceDetector$ python3 FaceDetector.py  得到结果：
| ======= Horned Sungem ======== | | Device found [0] | | ../graphs/graph_face_SSD | | Model loaded to Python | | Model allocated to device | | ============================== | * *****SSD [0]: Box values****** * ...  如图像中包括人脸，则：
* *****SSD [1]: Box values****** * * Box Name: Face * * 360 106 591 361 - w:231 h:255 *  其中SSD [N]中N为检测人脸个数，下一行为人脸检测框Bounding Box的左上角和右下角坐标以及窗的宽高。</description>
    </item>
    
    <item>
      <title>物体检测</title>
      <link>https://hornedsungem.github.io/Docs/cn/workflow/python/detector_object/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hornedsungem.github.io/Docs/cn/workflow/python/detector_object/</guid>
      <description>SSD-Mobilenet 物体检测 本章为您介绍如何使用角蜂鸟在Python调用内置部署的SSD-Mobilenet物体检测卷积神经网络。
检测器分析图片并找出目标的位置和尺寸。
 本教程基于Ubuntu 16.04系统  路径和文件  物体识别Python：SungemSDK-Python/examples/apps/ObjectDetector/ObjectDetector.py 模型文件：SungemSDK-Python/examples/graphs/graph_object_SSD  物体检测 Object Detector 在ObjectDetector目录下执行以下命令来启动 物体检测 范例。
~/SungemSDK/examples/apps/ObjectDetector$ python3 ObjectDetector.py  物体检测流程与人脸检测基本相同。检测类别为20个，具体类别请参考VOC数据库或从API中取得。
使用实例 * *****SSD [2]: Box values****** * * Box Name: chair * * 221 141 335 300 - w:114 h:159 * * Box Name: pottedplant * * 388 46 530 265 - w:142 h:219 *  *截图和复制时之间的短暂延时导致图片与结果略微不符</description>
    </item>
    
    <item>
      <title>情景记录器</title>
      <link>https://hornedsungem.github.io/Docs/cn/workflow/python/recorder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hornedsungem.github.io/Docs/cn/workflow/python/recorder/</guid>
      <description>角蜂鸟情景记录器 本章为您介绍如何使用角蜂鸟在Python调用内置部署的GoogleNet来实现一个实用性非常强的情景记录器。
介绍 角蜂鸟情景记录器可将希望分类的图像实时储存在不同的“存档”下并立即生成一个分类模型，之后便可辨识它们对应的场景。比如说在门打开的时候将图像录制进[存档1]，关闭的时候录制进[存档2]，生成模型之后便可辨认门是否开启。将不同的手势录制进不同的存档下就变成了一个简单的手势识别。
使用说明 执行Python程序、初始化角蜂鸟之后，对准需要录制的第一个目标，按1-5之中的一个数字（对应存档编号）：
比如说按1后保持7帧，终端将显示：
| Record to bin: 1 | | [7]-[0]-[0]-[0]-[0] |  接着对准第二个目标按2：
| Record to bin: 2 | | [7]-[8]-[0]-[0]-[0] |  这样记录器中储存两个目标就可以开始生成模型了。
按 &amp;lsquo;r&amp;rsquo; 将筛选去除每个存档中的冗余图像特征，并生成模型。
| .........Compressing.......... | | [2]-[2]-[0]-[0]-[0] | | ------Compress finished------- |  进入识别状态并开始实时显示5个不同类别的置信度。下例中的意思为第一个类别的可能性为74%，第二个为26%。第二个栏里简单的将置信度可视化，竖条越多说明当前场景越可能属于该存档。
| ---------Running ANN---------- | * [1]: 0.74 * * [2]: 0.26 * * [3]: 0.00 * * [4]: 0.00 * * [5]: 0.00 * | --------Probabilities--------- | | ||||||| | | || | | | | | | |  按 &amp;rsquo;s&amp;rsquo; 将存档录入至 /misc/record.</description>
    </item>
    
    <item>
      <title>图像识别器（底层API教程）</title>
      <link>https://hornedsungem.github.io/Docs/cn/workflow/python/image_recognition/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hornedsungem.github.io/Docs/cn/workflow/python/image_recognition/</guid>
      <description>SqueezeNet 1000类图像识别器 本章为您介绍如何使用角蜂鸟在Python调用底层API实现基于SqueezeNet的图像识别器。
比起检测器，识别器可从图片分析得到较细的分类类别，例如猫、狗的某个品种。
 本教程基于Ubuntu 16.04系统  路径和文件  人脸识别Python：SungemSDK-Python/examples/apps/ImageRecognition/ImageRecognition.py 模型文件：SungemSDK-Python/examples/graphs/graph_sz  图像识别 Image Recognition 在ImageRecognition目录下执行以下命令来启动 图像识别 范例。
~/SungemSDK/examples/apps/ImageRecognition$ python3 ImageRecognition.py  识别目标图像为青色框中区域(ROI)的图像部分。通过按 &amp;lsquo;w&amp;rsquo; 与 &amp;rsquo;s&amp;rsquo; 可调整 ROI 的大小。
得到 Top5 结果例如: 属于计算机键盘概率98.39%、空格1.40%、打字机键盘0.22%、笔记本0.03%、仓鼠0.00%。 因为调用全部函数为底层API，终端不显示任何提示。
参数设置 初始化 # Load device （载入设备） devices = hs.EnumerateDevices() dev = hs.Device(devices[0]) dev.OpenDevice() # Load CNN model （载入模型） with open(&#39;../../graphs/graph_sz&#39;, mode=&#39;rb&#39;) as f: b = f.read() graph = dev.AllocateGraph(b) dim = (227,227) # Load classes （载入分类标签） classes=np.</description>
    </item>
    
    <item>
      <title>人脸识别器（双角蜂鸟集联教程）</title>
      <link>https://hornedsungem.github.io/Docs/cn/workflow/python/face_recognition/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hornedsungem.github.io/Docs/cn/workflow/python/face_recognition/</guid>
      <description>人脸检测器 + 情景记录器 = 人脸识别器 本章为您介绍如何使用两个角蜂鸟基于人脸检测与情景记录器来实现人脸识别。
 注意：本范例需要同时运行两个角蜂鸟进行集联 本教程基于Ubuntu 16.04系统  路径和文件  人脸识别Python：SungemSDK-Python/examples/apps/FaceRecorder/FaceRecorder.py 模型文件 - 检测：SungemSDK-Python/examples/graphs/graph_face_SSD 模型文件 - 识别：SungemSDK-Python/examples/graphs/graph_face_rec  图像识别 Image Recognition 连接两个角蜂鸟后，在FaceRecorder目录下执行以下命令来启动 双角蜂鸟人脸识别 范例。
~/SungemSDK-Python/examples/apps/FaceRecorder$ python3 FaceRecorder.py  运行后会出现窗口 Detection， 显示人脸检测结果。 如果检测到人脸， 会出现第二个窗口 Rec 指示录制目标。
单击 Detection 窗口， 按住 1 可将当前人脸录入至第一个存档中。将负责检测的角蜂鸟对准第二个人， 在Rec 窗口中出现第二个人后， 按住 2 可将第二人录入至第二个存档中。 之后按 r 即可实时训练出人脸分类器。
识别结果将显示于人脸的检测框上。
键盘输入：  1-9: 将录制框中人脸储存至1-9。 s: 将存档数据存储至指定路径。 l: 从指定路径读取存档数据，需与 numBin 符合。 p: 重置存档。
 注意：必须点击OpenCV窗口键盘输入才有效。
  参数设置 初始化 # Load device （载入双设备） # 第二个角蜂鸟设置deviceIdx为1，设置检测器 verbose = 0 来关掉检测相关的终端输出。 net = hs.</description>
    </item>
    
  </channel>
</rss>