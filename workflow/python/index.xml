<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on 角蜂鸟中文文档</title>
    <link>https://hornedsungem.github.io/Docs/workflow/python/</link>
    <description>Recent content in Python on 角蜂鸟中文文档</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="https://hornedsungem.github.io/Docs/workflow/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>人脸检测</title>
      <link>https://hornedsungem.github.io/Docs/workflow/python/detector/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hornedsungem.github.io/Docs/workflow/python/detector/</guid>
      <description>本章将为您介绍如何使用角蜂鸟Python开发工具包，调用 SSD-Mobilenet 人脸检测卷积神经网络。
准备工作 根据使用入门获取 Python开发工具包 和 模型资源。
模型文件graph_face_SSD 示例程序examples/apps/FaceDetector/FaceDetector.py  代码实现 # 1. 导入需要的模块 import numpy as np, cv2, sys from hsapi import FaceDetector # 2. 创建人脸检测网络 net = FaceDetector(zoom=True, thresh=0.55) &amp;quot;&amp;quot;&amp;quot; zoom: 如果为True，使用角蜂鸟自带的摄像头输出的图像分辨率为 640x360，否则为 1920x1080 thresh: 人脸检测阈值，范围为0-1，提高阈值会减少错检但增加漏检，反之亦然。 device: 用于指定创建网络的设备 graphPath: 用于自定义graph文件路径，默认在 examples/graphs 目录下 ... 其他选项可参考API中的具体实现 &amp;quot;&amp;quot;&amp;quot; # 如果使用外置摄像头，创建 cv2.VideoCapture 类来调用摄像头 WEBCAM = False if WEBCAM: video_capture = cv2.VideoCapture(0) # 3. 读取图像数据和检测结果，画框并显示出来 try: while True: # 如果使用外部摄像头，将摄像头图像加载到角蜂鸟中 if WEBCAM: _, img = video_capture.</description>
    </item>
    
    <item>
      <title>物体检测</title>
      <link>https://hornedsungem.github.io/Docs/workflow/python/detector_object/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hornedsungem.github.io/Docs/workflow/python/detector_object/</guid>
      <description> 本章将为您介绍如何使用角蜂鸟Python开发工具包，调用 SSD-Mobilenet 物体检测卷积神经网络。
准备工作 根据使用入门获取 Python开发工具包 和 模型资源。
模型文件graph_object_SSD 示例程序examples/apps/ObjectDetector/ObjectDetector.py  代码实现 物体检测的流程与人脸检测基本相同。检测类别为20个，具体类别请参考 模型说明 或 API中的具体代码。
效果展示 连接好角蜂鸟后执行：
cd SungemSDK-Python/examples/apps/ObjectDetector python3 ObjectDetector.py  </description>
    </item>
    
    <item>
      <title>情景记录器</title>
      <link>https://hornedsungem.github.io/Docs/workflow/python/recorder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hornedsungem.github.io/Docs/workflow/python/recorder/</guid>
      <description>角蜂鸟情景记录器 本章将为您介绍如何使用角蜂鸟Python开发工具包，来实现一个实用性非常强的情景记录器。
介绍 角蜂鸟情景记录器可将希望分类的图像实时储存在不同的“存档”下并立即生成一个分类模型，之后便可辨识它们对应的场景。比如说在门打开的时候将图像录制进[存档1]，关闭的时候录制进[存档2]，生成模型之后便可辨认门是否开启。将不同的手势录制进不同的存档下就变成了一个简单的手势识别。
使用说明 执行Python程序、初始化角蜂鸟之后，对准需要录制的第一个目标，按1-5之中的一个数字（对应存档编号）：
比如说按1后保持7帧，终端将显示：
| Record to bin: 1 | | [7]-[0]-[0]-[0]-[0] |  接着对准第二个目标按2：
| Record to bin: 2 | | [7]-[8]-[0]-[0]-[0] |  这样记录器中储存两个目标就可以开始生成模型了。
按 &amp;lsquo;r&amp;rsquo; 将筛选去除每个存档中的冗余图像特征，并生成模型。
| .........Compressing.......... | | [2]-[2]-[0]-[0]-[0] | | ------Compress finished------- |  进入识别状态并开始实时显示5个不同类别的置信度。下例中的意思为第一个类别的可能性为74%，第二个为26%。第二个栏里简单的将置信度可视化，竖条越多说明当前场景越可能属于该存档。
| ---------Running ANN---------- | * [1]: 0.74 * * [2]: 0.26 * * [3]: 0.00 * * [4]: 0.00 * * [5]: 0.00 * | --------Probabilities--------- | | ||||||| | | || | | | | | | |  按 &amp;rsquo;s&amp;rsquo; 将存档录入至 /misc/record.</description>
    </item>
    
    <item>
      <title>图像识别器（底层API教程）</title>
      <link>https://hornedsungem.github.io/Docs/workflow/python/image_recognition/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hornedsungem.github.io/Docs/workflow/python/image_recognition/</guid>
      <description>SqueezeNet 1000类图像识别器 本章为您介绍如何使用角蜂鸟在Python调用底层API实现基于SqueezeNet的图像识别器。
比起检测器，识别器可从图片分析得到较细的分类类别，例如猫、狗的某个品种。
 本教程基于Ubuntu 16.04系统  路径和文件  人脸识别Python：SungemSDK-Python/examples/apps/ImageRecognition/ImageRecognition.py 模型文件：SungemSDK-Python/examples/graphs/graph_sz  图像识别 Image Recognition 在ImageRecognition目录下执行以下命令来启动 图像识别 范例。
~/SungemSDK/examples/apps/ImageRecognition$ python3 ImageRecognition.py  识别目标图像为青色框中区域(ROI)的图像部分。通过按 &amp;lsquo;w&amp;rsquo; 与 &amp;rsquo;s&amp;rsquo; 可调整 ROI 的大小。
得到 Top5 结果例如: 属于计算机键盘概率98.39%、空格1.40%、打字机键盘0.22%、笔记本0.03%、仓鼠0.00%。 因为调用全部函数为底层API，终端不显示任何提示。
参数设置 初始化 # Load device （载入设备） devices = hs.EnumerateDevices() dev = hs.Device(devices[0]) dev.OpenDevice() # Load CNN model （载入模型） with open(&#39;../../graphs/graph_sz&#39;, mode=&#39;rb&#39;) as f: b = f.read() graph = dev.AllocateGraph(b) dim = (227,227) # Load classes （载入分类标签） classes=np.</description>
    </item>
    
  </channel>
</rss>