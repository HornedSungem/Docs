<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Horned Sungem Documentation</title>
    <link>https://hornedsungem.github.io/Docs/workflow/python/</link>
    <description>Recent content in Python on Horned Sungem Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="https://hornedsungem.github.io/Docs/workflow/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Face detector</title>
      <link>https://hornedsungem.github.io/Docs/workflow/python/detector/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hornedsungem.github.io/Docs/workflow/python/detector/</guid>
      <description>SSD-Mobilenet Face Detector This chapter will introduce how to use HS to deploy SSD-Mobilenet face detector
 Based on Ubuntu 16.04  Path and files  Python: SungemSDK/examples/python/FaceDetector.py Model file: SungemSDK/examples/graphs/graph_face_SSD  Face Detector Under python directory, enter following command to run face detector demo:
~/SungemSDK/examples/python$ python3 FaceDetector.py  get result:
| ======= Horned Sungem ======== | | Device found [0] | | ../graphs/graph_face_SSD | | Model loaded to Python | | Model allocated to device | | ============================== | * *****SSD [0]: Box values****** * .</description>
    </item>
    
    <item>
      <title>Object Detector</title>
      <link>https://hornedsungem.github.io/Docs/workflow/python/detector_object/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hornedsungem.github.io/Docs/workflow/python/detector_object/</guid>
      <description>SSD-Mobilenet Object Detector This chapter will introduce how to user HS to deploy SSD-Mobilenet object detector.
Detector analyse images and find the target image location and size.
 Based on Ubuntu 16.04  Path and files  Python: SungemSDK/examples/python/ObjectDetector.py Model files: SungemSDK/examples/graphs/graph_object_SSD  Object Detector Under python directory, enter following command to run object detector demo:
~/SungemSDK/examples/python$ python3 ObjectDetector.py  Object detector is very similar to the previous face detector, except the number of classes is 20 (from VOC dataset).</description>
    </item>
    
    <item>
      <title>Scene Recorder</title>
      <link>https://hornedsungem.github.io/Docs/workflow/python/recorder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hornedsungem.github.io/Docs/workflow/python/recorder/</guid>
      <description>Scene Recorder This chapter introduces how to use HS to deploy GoogleNet for building a useful scene recorder tool
Introduction HS Scene Recorder records and classifies images in real-time. It &amp;lsquo;descripts&amp;rsquo; images into image feature vectors and store them into different bins for training a classifier. For instance, put HS in front of a door and record the images to bin-0 when door is closed and bin-&amp;lsquo;1&amp;rsquo; when door is opened.</description>
    </item>
    
    <item>
      <title>Image Recogniser (Low-level API Tutorial)</title>
      <link>https://hornedsungem.github.io/Docs/workflow/python/image_recognition/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hornedsungem.github.io/Docs/workflow/python/image_recognition/</guid>
      <description>SqueezeNet 1000 Classes Image Classifier This chapter introduces how to build an image classifier by using low-level API only.
 Tested on Ubuntu 16.04  Path and files  Python：SungemSDK/examples/python/ImageRecognition.py Model file：SungemSDK/examples/graphs/graph_sz  Image Recognition run image recogniser with the following command under python directory
~/SungemSDK/examples/python$ python3 ImageRecognition.py  The region-of-interest is highlighted with a cyan bounding box. You can adjust the size by pressing &amp;lsquo;w&amp;rsquo; and &amp;rsquo;s&amp;rsquo;.
Get Top5 classification result, as shown in the example.</description>
    </item>
    
    <item>
      <title>Face recorder (Working with two HS devices)</title>
      <link>https://hornedsungem.github.io/Docs/workflow/python/face_recognition/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hornedsungem.github.io/Docs/workflow/python/face_recognition/</guid>
      <description>Face detetor + Scene recorder = Face recorder This chapter introduces how to build a face recorder with two HS devices.
 Note that two HS devices are needed to run this demo Tested on Ubuntu 16.04 system  Path and files  Face recorder Python：SungemSDK/examples/python/FaceRecorder.py Model file - detection：SungemSDK/examples/graphs/graph_face_SSD Model file - recognition：SungemSDK/examples/graphs/graph_face_rec  Image Recognition After connecting two HS devices, run face recorder with the following command under python directory</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hornedsungem.github.io/Docs/workflow/python/ocr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hornedsungem.github.io/Docs/workflow/python/ocr/</guid>
      <description> 本章为您介绍如何使用角蜂鸟在Python调用内置部署的OCR中文文字检测与识别。
OCR分析图片找出文字并识别。
 本教程基于Ubuntu 16.04系统  路径和文件  OCR Python：SungemSDK/examples/python/OCR.py 模型文件：SungemSDK/examples/graphs/graph_ocr  </description>
    </item>
    
  </channel>
</rss>